// @ts-check -- 에디터에서 타입 체크 활성화 (선택 사항)\n\nimport eslint from \'@eslint/js\';\nimport tseslint from \'typescript-eslint\';\nimport prettierConfig from \'eslint-config-prettier\';\n// import turboPlugin from \'eslint-plugin-turbo\'; // 필요시 활성화\n\n/** @type { import(\"eslint\").Linter.FlatConfig[] } */\nexport default tseslint.config(\n  // 기본 ESLint 권장 규칙\n  eslint.configs.recommended,\n  // TypeScript ESLint 권장 규칙 (타입 검사 포함)\n  // 프로젝트 루트에 tsconfig.json 이 필요할 수 있음\n  ...tseslint.configs.recommendedTypeChecked,\n  // 또는 타입 검사 없이 사용:\n  // ...tseslint.configs.recommended,\n\n  // Prettier 충돌 방지 설정 (가장 마지막에 위치해야 함)\n  prettierConfig,\n\n  // Turbo Plugin (필요시)\n  // { \n  //   plugins: { turbo: turboPlugin }, \n  //   rules: turboPlugin.configs.recommended.rules \n  // },\n\n  {\n    // 전체 프로젝트에 적용될 설정\n    languageOptions: {\n      parserOptions: {\n        project: true, // 타입 검사 규칙을 위해 필요\n        tsconfigRootDir: process.cwd(), // 프로젝트 루트에서 tsconfig 찾기\n      },\n    },\n    rules: {\n      // 여기에 공통으로 적용할 커스텀 규칙 추가\n      // 예: 사용하지 않는 변수 경고 (하지만 타입스크립트에서 이미 처리)\n      // \'no-unused-vars\': \'warn\',\n\n      // 타입스크립트 관련 규칙 미세 조정 가능\n      // 예: 명시적 any 타입 허용 안 함\n      \'@typescript-eslint/no-explicit-any\': \'warn\',\n      // 사용하지 않는 변수 (타입스크립트 규칙 사용)\n      \'no-unused-vars\': \'off\',\n      \'@typescript-eslint/no-unused-vars\': [\n        \'warn\',\n        { argsIgnorePattern: \'^\_\', varsIgnorePattern: \'^\_\', caughtErrorsIgnorePattern: \'^\_\' },\n      ],\n    },\n    ignores: [\n      // 전역적으로 무시할 파일 또는 디렉토리\n      \'**/node_modules/**\',\n      \'**/dist/**\',\n      \'**/.turbo/**\',\n      \'**/.next/**\',\n      \'**/coverage/**\',\n    ],\n  }\n);\n 